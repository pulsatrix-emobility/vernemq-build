name: Erlang CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  VMQ_VERSION: 1.11.0

jobs:
  build:
    runs-on: ubuntu-20.04

    container:
      image: ubuntu:focall@sha256:c95a8e48bf88e9849f3e0f723d9f49fa12c5a00cfc6e60d2bc99d87555295e4c
      
    steps:
    - name: Bump version and push tag
      id: semanticversion
      uses: hennejg/github-tag-action@v4.2.4
      with:
        release_branches: master
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: install stuff
      run: |
        export DEBIAN_FRONTEND=noninteractive;
        apt-get update;
        apt-get install -y --no-install-recommends tzdata keyboard-configuration;
        apt-get install -y bash procps openssl iproute2 curl jq libsnappy-dev net-tools git make gcc g++ wget gnupg libssl-dev;
     
    - name: install erlang
      run: |
        wget -O- https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | apt-key add -
        echo "deb https://packages.erlang-solutions.com/ubuntu focal contrib" | tee /etc/apt/sources.list.d/erl.list
        apt update
        apt-get install -y erlang
      
    - name: Checkout vernemq
      uses: actions/checkout@v2
      with:
        repository: vernemq/vernemq
        ref: ${{ env.VMQ_VERSION }}
        path: .

#    - name: Run tests
#      run: ./rebar3 as all_tests do dialyzer, eunit, ct
      
    - name: Build release
      run: make rel
      
    - name: Package release
      run: tar -C _build/default/rel/vernemq -cvzf /vernemq-pulsatrix-${{ steps.semanticversion.outputs.new_tag }}.tgz . 
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.semanticversion.outputs.new_tag }}
        release_name: Pulsatrix VMQ ${{ steps.semanticversion.outputs.new_tag }}, VMQ@${{ env.VMQ_VERSION }}, ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /vernemq-pulsatrix-${{ steps.semanticversion.outputs.new_tag }}.tgz
        asset_name: vernemq-pulsatrix-${{ steps.semanticversion.outputs.new_tag }}.tgz
        asset_content_type: application/tar+gzip
